
🔍 Python Port Scanner – Project Explanation

📌 Overview
This project is a Python-based command-line port scanner designed to test which TCP ports on a target machine are open. It's a simple yet powerful tool written in pure Python using the built-in `socket` and `sys` libraries, making it fast and lightweight.

🧠 Purpose
The main goal is to:
- Understand how TCP port scanning works.
- Learn how to use Python sockets for network communication.
- Build the foundation for a more advanced cybersecurity tool.

🚀 Features
- IP targeting: Scan any IP address or domain.
- Custom port range: Specify a start and end port.
- Timeout handling: 1-second timeout for unresponsive ports.
- Open port detection: Displays a list of open ports.
- Simple usage: Lightweight, no dependencies required.

🛠️ How It Works
1. Command-line arguments are used to receive the IP and optional port range:
   python3 scanner.py <IP> [START_PORT] [END_PORT]

2. The script creates a socket and tries to connect to each port in the range.
3. If the connection is successful, the port is considered open.
4. Results are printed to the console.

🧾 Example Usage
   python3 scanner.py 192.168.1.1 20 80

🔒 Limitations
- No multithreading (can be slow)
- No service detection
- No result saving
- TCP-only scan

💡 Future Improvements (from requirements.txt)
- Add multithreading for speed
- Add subdomain scanner and banner grabber
- Export scan results to CSV/Excel
- Add colorful CLI (rich)
- Build a web interface (Flask)

📁 File List
- portinfoga.py           -> Main Python port scanning script
- requirements.txt     -> External dependencies (for future versions)
- project_description.txt -> This explanation file
- Result -> Output of code
